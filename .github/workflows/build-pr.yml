name: build-pr

on:
  pull_request:

jobs:
  build:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job_name: ['linux', 'windows', 'mac_amd64', 'mac_arm64']

        include:
          - job_name: linux
            os: ubuntu-latest
            go: '>=1.24.0-rc.1'
            gotags: cmount
            cgo: '0'
            build_flags: '-include "^(linux/amd64|linux/arm64|linux/arm-v7)"'

          - job_name: windows
            os: windows-latest
            go: '>=1.24.0-rc.1'
            gotags: cmount
            cgo: '0'
            build_flags: '-include "^(windows/amd64|windows/arm64)"'
            build_args: '-buildmode exe'

          - job_name: mac_amd64
            os: macos-latest
            go: '>=1.23.0-rc.1'
            gotags: 'cmount'
            build_flags: '-include "^darwin/amd64" -cgo'

          - job_name: mac_arm64
            os: macos-latest
            go: '>=1.23.0-rc.1'
            gotags: 'cmount'
            build_flags: '-include "^darwin/arm64" -cgo -macos-arch arm64 -cgo-cflags=-I/usr/local/include -cgo-ldflags=-L/usr/local/lib'

    name: ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          check-latest: true

      - name: Set environment variables
        shell: bash
        run: |
          echo 'GOTAGS=${{ matrix.gotags }}' >> $GITHUB_ENV
          echo 'BUILD_FLAGS=${{ matrix.build_flags }}' >> $GITHUB_ENV
          echo 'BUILD_ARGS=${{ matrix.build_args }}' >> $GITHUB_ENV
          if [[ "${{ matrix.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ matrix.cgo }}' >> $GITHUB_ENV ; fi

      - name: Install Libraries on Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo modprobe fuse
          sudo chmod 666 /dev/fuse
          sudo chown root:$USER /etc/fuse.conf
          sudo apt-get update
          sudo apt-get install -y fuse3 libfuse-dev rpm pkg-config git-annex git-annex-remote-rclone nfs-common

      - name: Install Libraries on macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          unset HOMEBREW_NO_INSTALL_FROM_API
          brew untap --force homebrew/core
          brew untap --force homebrew/cask
          brew update
          brew install --cask macfuse
          brew install git-annex git-annex-remote-rclone

      - name: Install Libraries on Windows
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install -y winfsp zip
          echo "CPATH=C:\Program Files\WinFsp\inc\fuse;C:\Program Files (x86)\WinFsp\inc\fuse" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($env:GOARCH -eq "386") {
            choco install -y mingw --forcex86 --force
            echo "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw32\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          $path = (get-command mingw32-make.exe).Path
          Copy-Item -Path $path -Destination (Join-Path (Split-Path -Path $path) 'make.exe')

      - name: Print Go version and environment
        shell: bash
        run: |
          go version
          go env
          make vars
          env

      - name: Build rclone
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then make release_dep_linux ; fi
          make cross

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rclone-${{ matrix.job_name }}
          path: ${{ github.workspace }}/build/**/*
          retention-days: 7

  comment-artifacts:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Download artifacts list
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Comment on PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$(echo 'âœ… Artifacts built and uploaded. You can download them from the *Actions* tab_
